AWSTemplateFormatVersion: 2010-09-09
Description: A stack to run squash app for assessment2, including rds, elasticache, documentdb, s3, parameter/secret and cognito
Parameters:
  VpcId:
    Type: String
    Description: "VPC for the whole app"
    Default: vpc-007bab53289655834
  EC2SGId:
    Type: String
    Description: "Security group id for EC2"
    Default: sg-001c16f1b0770114d
  DBSGId:
    Type: String
    Description: "Security group id for DB"
    Default: sg-0682b86d12378ee7a
  QUTUserName:
    Type: String
    Description: "QUT username"
    Default: n11457571@qut.edu.au
  Purpose:
    Type: String
    Description: "purpose for the stack"
    Default: "Assessment 2"
  ResourceName:
    Type: String
    Description: "S3/rds/documentdb/cache/cognito resource name"
    Default: "squash-assess2"
  CognitoGoogleClientId:
    Type: String
    Description: "cognito google client id"
  CognitoGoogleClientSecret:
    Type: String
    Description: "cognito google client secret"
  Ec2Key:
    Type: String
    Description: "EC2 key pair name, used for SSH connection"
    Default: n11457571
  RDSAdmin:
    Type: String
    Description: "root user for RDS"
    Default: admin
  RDSPass:
    Type: String
    Description: "root pass for RDS"
    Default: squashassess2
  DocAdmin:
    Type: String
    Description: "root user for Document DB"
    Default: squash
  DocPass:
    Type: String
    Description: "root pass for Document DB"
    Default: squashassess2
  DocDBName:
    Type: String
    Description: "instance name of document db"
    Default: squash-assess2-docdb


Resources:
  MyS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref ResourceName
      AccessControl: Private
      Tags:
        - Key: "qut-username"
          Value: !Ref QUTUserName
        - Key: "purpose"
          Value: !Ref Purpose

  ElastiCache:
    Type : "AWS::ElastiCache::CacheCluster"
    Properties:
      ClusterName: "squash-assess2"
      CacheNodeType: "cache.t4g.micro"
      Engine: "memcached"
      NumCacheNodes: 1
      CacheSubnetGroupName: "cab432-private-subnets"
      VpcSecurityGroupIds:
      - !Ref DBSGId
      Tags:
      - Key: "qut-username"
        Value: !Ref QUTUserName
      - Key: "purpose"
        Value: !Ref Purpose

  MyUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref ResourceName
      UsernameAttributes:
        - email
      MfaConfiguration: OPTIONAL
      EnabledMfas: 
        - SOFTWARE_TOKEN_MFA
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: email
          Required: true
          Mutable: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolTags:
        qut-username: !Ref QUTUserName
        purpose: !Ref Purpose
  
  MyUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref MyUserPool
      Domain: !Ref ResourceName

  MyUserPoolIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref MyUserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: !Ref CognitoGoogleClientId
        client_secret: !Ref CognitoGoogleClientSecret
        authorize_scopes: "profile email openid"
      ProviderType: "Google"
      AttributeMapping:
        email: "email"

  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref ResourceName
      UserPoolId: !Ref MyUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: True
      GenerateSecret: false
      CallbackURLs: 
        - "http://localhost:5173/googlecallback"
        - "http://localhost:3000/googlecallback"
      SupportedIdentityProviders: 
        - "COGNITO"
        - "Google"
      AllowedOAuthFlows: 
        - "code"
        - "implicit"
      AllowedOAuthScopes: 
        - "openid"
        - "email"
        - "profile"
    DependsOn: MyUserPoolIdentityProvider

  MyEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref Ec2Key
      InstanceType: t3.medium
      ImageId: ami-00e2ab724908a4de5
      IamInstanceProfile: ec2SSMCab432
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: subnet-075811427d5564cf9
          GroupSet:
            - !Ref EC2SGId
      Tags:
        - Key: "qut-username"
          Value: !Ref QUTUserName
        - Key: "purpose"
          Value: !Ref Purpose
        - Key: "Name"
          Value: !Ref ResourceName

  MyRDS:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBInstanceIdentifier: !Ref ResourceName
      Engine: "mysql"
      EngineVersion: "8.0"
      MasterUsername: !Ref RDSAdmin
      MasterUserPassword: !Ref RDSPass
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      VPCSecurityGroups: 
      - !Ref DBSGId
      DBSubnetGroupName: default-vpc-007bab53289655834
      BackupRetentionPeriod: 0
      PubliclyAccessible: false
      MultiAZ: false
      DBName: squash
      Tags:
        - Key: "qut-username"
          Value: !Ref QUTUserName
        - Key: "purpose"
          Value: !Ref Purpose

  DocDBCluster:
    Type: "AWS::DocDB::DBCluster"
    Properties: 
      EngineVersion: "5.0"
      MasterUsername: !Ref DocAdmin
      MasterUserPassword: !Ref DocPass
      DBClusterIdentifier: !Ref DocDBName
      DBSubnetGroupName: default-vpc-007bab53289655834
      VpcSecurityGroupIds:
        - !Ref DBSGId

  DocDBInstance:
    Type: "AWS::DocDB::DBInstance"
    Properties: 
      DBClusterIdentifier: !Ref DocDBCluster
      DBInstanceClass: "db.t3.medium"
      DBInstanceIdentifier: !Ref DocDBName


Outputs:
  ElastiCacheEndpoint:
    Description: "The endpoint of the ElastiCache cluster"
    Value: !GetAtt ElastiCache.ConfigurationEndpoint.Address
    Export:
      Name: "ElastiCacheEndpoint"
      
  ElastiCachePort:
    Description: "The port of the ElastiCache cluster"
    Value: !GetAtt ElastiCache.ConfigurationEndpoint.Port
    Export:
      Name: "ElastiCachePort"

  UserPoolId:
    Description: "User pool ID of cognito"
    Value: !GetAtt MyUserPool.UserPoolId
    Export:
      Name: "UserPoolId"

  UserPoolClientId:
    Description: "app id of cognito user pool"
    Value: !GetAtt MyUserPoolClient.ClientId
    Export:
      Name: "UserPoolClientId"

  RDSEndpoint:
    Description: "The endpoint of the MySQL RDS instance"
    Value: !GetAtt MyRDS.Endpoint.Address
    Export:
      Name: "RDSEndpoint"

  RDSPort:
    Description: "The port of the MySQL RDS instance"
    Value: !GetAtt MyRDS.Endpoint.Port
    Export:
      Name: "RDSPort"

  DocEndpoint:
    Description: "DocumentDB Cluster Endpoint"
    Value: !GetAtt DocDBCluster.Endpoint
    Export:
      Name: "DocEndpoint"

  DocPort:
    Description: "DocumentDB Cluster Port"
    Value: !GetAtt DocDBCluster.Port
    Export:
      Name: "DocPort"
  
  
